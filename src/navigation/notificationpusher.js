import Pusher from 'pusher-js/react-native';
import React from 'react';
import { View, Platform,StatusBar} from 'react-native';
import { updateSensors } from '../redux/action/tankAction';
import {connect} from 'react-redux';
import PushNotification from 'react-native-push-notification';
import {addNotification} from '../redux/action/notificationAction';



var channel = null;


class NotificationPusher extends React.Component{
    constructor(props){
        super(props);
        this.state={
            loading:true
        }
    }
    
//pusher 
async componentDidMount() {
    console.log('pusher file');
    const {user,updateSensors,addNotification,notification} = await this.props;

    var pusher = new Pusher('f00f0afe5cbf360133db', {
        cluster: 'ap2',
        forceTLS: true
    });
   console.log('id', user.id)

    channel = pusher.subscribe(`${user.id}`);
    //console.log('channel',channel)

    channel.bind ('update',function(data) {   
        //console.log('pusher', data)     
        updateSensors(data);
    },
   
    channel.bind ('notification',function(data){ 
        //console.log('Notify',data)
        addNotification(data)

        if(Platform.OS === 'android'){
            PushNotification.localNotification({
              /* Android Only Properties */
              id: '0', // (optional) Valid unique 32 bit integer specified as string. default: Autogenerated Unique ID
              ticker: "Notification", // (optional)
              autoCancel: true, // (optional) default: true
              largeIcon: "ic_launcher", // (optional) default: "ic_launcher"
              smallIcon: "ic_notification", // (optional) default: "ic_notification" with fallback for "ic_launcher"
              bigText: data.title, // (optional) default: "message" prop
              //subText: "This is a subText", // (optional) default: none
              //color: "red", // (optional) default: system default
              vibrate: true, // (optional) default: true
              vibration: 300, // vibration length in milliseconds, ignored if vibrate=false, default: 1000
              tag: 'some_tag', // (optional) add tag to message
              group: "group", // (optional) add group to message
              ongoing: false, // (optional) set whether this is an "ongoing" notification
              priority: "high", // (optional) set notification priority, default: high
              visibility: "private", // (optional) set notification visibility, default: private
              importance: "high", // (optional) set notification importance, default: high
          
              /* iOS and Android properties */
              //title: "RS Home", // (optional)
              message: data.title, // (required)
              playSound: true, // (optional) default: true
              soundName: 'default', // (optional) Sound to play when the notification is shown. Value of 'default' plays the default sound. It can be set to a custom sound such as 'android.resource://com.xyz/raw/my_sound'. It will look for the 'my_sound' audio file in 'res/raw' directory and play it. default: 'default' (default sound is played)
              number: '10', // (optional) Valid 32 bit integer specified as string. default: none (Cannot be zero)
              //repeatType: 'day', // (optional) Repeating interval. Check 'Repeating Notifications' section for more info.
              //actions: '["Yes", "No"]',  // (Android only) See the doc for notification actions to know more
            });
          } 
        })
    );
    this.props.navigation.navigate('home');
    }

render() {


    return(
     <StatusBar  backgroundColor="black"/>
        ); 
    }
}

 mapStateToProps = (state) => ({
    user: state.auth.user,
    notification: state.notifications.notifications,
})
    
export default connect(mapStateToProps,{updateSensors,addNotification})(NotificationPusher);